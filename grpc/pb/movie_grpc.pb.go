// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: grpc/proto/movie.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieManagerClient is the client API for MovieManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieManagerClient interface {
	CreateNewMovie(ctx context.Context, in *NewMovie, opts ...grpc.CallOption) (*Movie, error)
	GetMovies(ctx context.Context, in *GetMoviesParams, opts ...grpc.CallOption) (*MovieList, error)
}

type movieManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieManagerClient(cc grpc.ClientConnInterface) MovieManagerClient {
	return &movieManagerClient{cc}
}

func (c *movieManagerClient) CreateNewMovie(ctx context.Context, in *NewMovie, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, "/MovieManager/CreateNewMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieManagerClient) GetMovies(ctx context.Context, in *GetMoviesParams, opts ...grpc.CallOption) (*MovieList, error) {
	out := new(MovieList)
	err := c.cc.Invoke(ctx, "/MovieManager/GetMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieManagerServer is the server API for MovieManager service.
// All implementations must embed UnimplementedMovieManagerServer
// for forward compatibility
type MovieManagerServer interface {
	CreateNewMovie(context.Context, *NewMovie) (*Movie, error)
	GetMovies(context.Context, *GetMoviesParams) (*MovieList, error)
	mustEmbedUnimplementedMovieManagerServer()
}

// UnimplementedMovieManagerServer must be embedded to have forward compatible implementations.
type UnimplementedMovieManagerServer struct {
}

func (UnimplementedMovieManagerServer) CreateNewMovie(context.Context, *NewMovie) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewMovie not implemented")
}
func (UnimplementedMovieManagerServer) GetMovies(context.Context, *GetMoviesParams) (*MovieList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovies not implemented")
}
func (UnimplementedMovieManagerServer) mustEmbedUnimplementedMovieManagerServer() {}

// UnsafeMovieManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieManagerServer will
// result in compilation errors.
type UnsafeMovieManagerServer interface {
	mustEmbedUnimplementedMovieManagerServer()
}

func RegisterMovieManagerServer(s grpc.ServiceRegistrar, srv MovieManagerServer) {
	s.RegisterService(&MovieManager_ServiceDesc, srv)
}

func _MovieManager_CreateNewMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMovie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieManagerServer).CreateNewMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MovieManager/CreateNewMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieManagerServer).CreateNewMovie(ctx, req.(*NewMovie))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieManager_GetMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoviesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieManagerServer).GetMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MovieManager/GetMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieManagerServer).GetMovies(ctx, req.(*GetMoviesParams))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieManager_ServiceDesc is the grpc.ServiceDesc for MovieManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MovieManager",
	HandlerType: (*MovieManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewMovie",
			Handler:    _MovieManager_CreateNewMovie_Handler,
		},
		{
			MethodName: "GetMovies",
			Handler:    _MovieManager_GetMovies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/movie.proto",
}
